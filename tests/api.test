package require tcltest
namespace import ::tcltest::*

#
# HELPER PROCS 
#
proc create_async {cDict} {
    set ::createAsync $cDict
}


#
#
# API TESTS
#
#
test create_sync {create a node and get its value} -body {
    set newNodeValue testingValueSync
    set newNodePath [file join / testCreateSync]
    zk create $newNodePath -value $newNodeValue

    return [zk get $newNodePath -version nodeVersion]
} -cleanup {
    zk delete $newNodePath $nodeVersion
} -result testingValueSync

test create_sync_null_data {create a node with no data} -body {
    set newNodeValue testingValueSync
    set newNodePath [file join / testCreateSyncNoData]
    zk create $newNodePath 

    return [zk get $newNodePath -version nodeVersion]
} -cleanup {
    zk delete $newNodePath $nodeVersion
} -result ""

test create_async {create a node using async and get its value} -body {
    set newNodeValue testingValueAsync
    set newNodePath [file join / testCreateAsync]
    zk create $newNodePath -value $newNodeValue -async create_async

    vwait ::createAsync
    return [dict get $::createAsync status]
} -cleanup {
    zk delete $newNodePath $nodeVersion
} -result ZOK

test create_node_twice_sync {
    create a node and then try to create it again
} -body {
    set newNodeValue createDup
    set newNodePath [file join / createDup]
    zk create $newNodePath -value $newNodeValue

    # try it again even though it already exists
    catch {zk create $newNodePath -value $newNodeValue} 
    puts $::errorCode
} -cleanup {
    zk delete $newNodePath -1
} -output "ZOOKEEPER ZNODEEXISTS {node exists}" -match regexp

test create_node_twice_async {
    create a node using async and then try to create it again
} -body {
    set newNodeValue createDup
    set newNodePath [file join / createDup]
    zk create $newNodePath -value $newNodeValue

    # try it again even though it already exists
    zk create $newNodePath -value $newNodeValue -async create_async
    vwait ::createAsync
    return [dict get $::createAsync status]
} -cleanup {
    zk delete $newNodePath -1
} -result ZNODEEXISTS

test create_ephemeral_node {
    create an ephemeral node, disconnect and verify that it no longer exists
} -body {
    set eNodePath [file join / createEphem]
    zk create $eNodePath -ephemeral

    zk destroy
    connect_to_zookeeper

    return [zk exists $eNodePath]
} -result 0

test create_sequential_node {
    create a sequential node and verify that it has the right number of digits
    which, according to the Zookeeper documentation, is 10, i.e., %010d
} -body {
    set sNodePath [file join / createSeq_]
    set sNodePath [zk create $sNodePath -sequence]
    
    set relativeName [lindex [file split $sNodePath] end]
    set numPart [lindex [split $relativeName _] end]
    return [string length $numPart]
} -cleanup {
    # create does not respect chroot when it is used
    # so have to compensate for this by being explicit 
    # in specifying the path of the node to delete
    zk delete [file join / $relativeName] -1
} -result 10

test create_numerous_sequential_nodes {
    create many sequential nodes and verify that they only exhibit
    monotonic sequence numbers
} -body {
    set sNodeBase [file join / createSeqs_]
    set seqNums [list]
    for {set i 0} {$i < 10} {incr i} {
	set sPath [zk create $sNodeBase -sequence -ephemeral]
	set sPath [lindex [file split $sPath] end]
	set seqNum [lindex [split $sPath _] end]
	lappend seqNums [scan $seqNum %d]
    }

    return [expr {$seqNums eq [lsort -integer $seqNums]}]
} -result 1

test exists_created_node_sync {
    create a node and check for its existence in sync mode
}

test exists_created_node_async {
    create a node and check for its existence in async mode
}

test exists_deleted_node_sync {

}

test exists_deleted_node_async {

}

cleanupTests

# vim: set ts=8 sw=4 sts=4 noet :
